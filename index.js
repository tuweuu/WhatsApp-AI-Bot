const qrcode = require('qrcode-terminal');
const { Client, LocalAuth } = require('whatsapp-web.js');
const { OpenAI } = require("openai");
const fs = require('fs').promises; // Using promises for async file operations
require('dotenv').config();

// --- CONFIGURATION ---
const OPENAI_MODEL = "gpt-4.1"; // Updated model
const MAX_HISTORY_LENGTH = 20;
const SUMMARIZATION_PROMPT = "Briefly summarize your conversation with the resident. Note down key details, names, and specific requests to ensure a smooth follow-up.";
const HISTORY_FILE_PATH = './history.json';

// --- WORK GROUP INTEGRATION ---
const WORK_GROUP_ID = process.env.WORK_GROUP_ID || null;
const REQUEST_CONFIRMATION_PROMPT = "Read the following message. Does it confirm that a service request has been successfully created and all necessary information (like address and time) has been collected? Answer only with 'yes' or 'no'.";
const REQUEST_EXTRACTION_PROMPT = "Extract the user's address and a description of the issue from the conversation. Return the data in JSON format with the keys: 'address', and 'issue'. If any information is missing, use the value 'null'.";
const ISSUE_SUMMARY_PROMPT = "Summarize the following issue in a few words.";
const DETAILED_ISSUE_PROMPT = "Based on the conversation history, generate a concise description of the user's issue **in Russian**, under 50 words.";

const SYSTEM_PROMPT = `–¢—ã - –ö—Ä–∏—Å—Ç–∏–Ω–∞. –¢–≤–æ—è —Ä–æ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ "–ü—Ä–æ–≥—Ä–µ—Å—Å". –¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å –∂–∏–ª—å—Ü–∞–º–∏ –∏ –ø–æ–º–æ–≥–∞–µ—à—å –∏–º —Ä–µ—à–∞—Ç—å –±—ã—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã.

–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
- –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —É—Å–ª—É–≥–∞–º –∫–æ–º–ø–∞–Ω–∏–∏, –≥—Ä–∞—Ñ–∏–∫—É —Ä–∞–±–æ—Ç—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º.
- –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç. –ï—Å–ª–∏ –∂–∏–ª–µ—Ü —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Ç–æ—á–Ω–∏, —á—Ç–æ —Ç–µ–±–µ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω—ã –µ–≥–æ –∞–¥—Ä–µ—Å –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∏–∑–∏—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞. –ü–æ–ª—É—á–∏–≤ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.
- –ü–æ–º–æ–≥–∞—Ç—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏—è–º –∏ –æ–ø–ª–∞—Ç–µ.
- –§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∂–∞–ª–æ–±—ã –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è.

–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: —Å 9:00 –¥–æ 18:00, —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É.
- –¢–µ–ª–µ—Ñ–æ–Ω –æ—Ñ–∏—Å–∞: +7 800 444 52 05.
- –û–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –≤ –æ—Ñ–∏—Å–µ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.
- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è iOS: https://apps.apple.com/app/id6738488843
- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Android: https://play.google.com/store/apps/details?id=ru.burmistr.app.client.c_4296

–í–∞–∂–Ω–æ:
- –ë—É–¥—å –≤–µ–∂–ª–∏–≤–æ–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ–π.
- –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π. –°–æ–æ–±—â–∏, —á—Ç–æ —É—Ç–æ—á–Ω–∏—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É –∫–æ–ª–ª–µ–≥.
- –í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ –∂–∏–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ù–µ —É–ø–æ–º–∏–Ω–∞–π –æ–± –ò–ò.

–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–æ–º–æ—á—å –∫–∞–∂–¥–æ–º—É –∂–∏–ª—å—Ü—É –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏—è—Ç–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏.`;


// --- INITIALIZATION ---
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

const client = new Client({
    authStrategy: new LocalAuth()
});

let conversationHistories = {}; // Let it be mutable

// --- PERSISTENCE FUNCTIONS ---
async function saveHistory() {
    try {
        const data = JSON.stringify(conversationHistories, null, 2);
        await fs.writeFile(HISTORY_FILE_PATH, data, 'utf8');
    } catch (error) {
        console.error("Error saving conversation history:", error);
    }
}

async function loadHistory() {
    try {
        await fs.access(HISTORY_FILE_PATH); // Check if file exists
        const data = await fs.readFile(HISTORY_FILE_PATH, 'utf8');
        conversationHistories = JSON.parse(data);
        console.log("Successfully loaded conversation history from file.");
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.log("No history file found. Starting with a fresh history.");
        } else {
            console.error("Error loading conversation history:", error);
        }
    }
}

// --- WHATSAPP CLIENT EVENTS ---
client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Client is ready!');
});

client.on('message', async message => {
    if (message.from.endsWith('@g.us')) {
        console.log(`Message received from group: ${message.from}`);
        return;
    }    

    if (message.isStatus) return;

    if (message.body.toLowerCase() === '!reset') {
        delete conversationHistories[message.from];
        await saveHistory(); // Save after reset
        console.log(`History for ${message.from} has been reset.`);
        message.reply("I've cleared our previous conversation. Let's start fresh.");
        return;
    }

    try {
        const history = conversationHistories[message.from] || [];
        history.push({ role: "user", content: message.body });

        const aiResponse = await getOpenAIResponse(history);
        history.push({ role: "assistant", content: aiResponse });

        conversationHistories[message.from] = history;
        message.reply(aiResponse);
        await saveHistory(); // Save after each message

        if (await isRequestCreationConfirmation(aiResponse)) {
            await handleServiceRequest(message.from, history);
        }

        if (history.length > MAX_HISTORY_LENGTH) {
            console.log(`History for ${message.from} exceeds limit. Triggering summarization.`);
            await summarizeHistory(message.from);
            await saveHistory(); // Save again after summarization
        }

    } catch (error) {
        console.error("Error processing message:", error);
        message.reply("I'm having some trouble right now. Please try again.");
    }
});

// --- STARTUP SEQUENCE ---
async function start() {
    await loadHistory();
    client.initialize();
}

start();

// --- CORE AI FUNCTIONS ---

async function getOpenAIResponse(messages) {
    try {
        const completion = await openai.chat.completions.create({
            model: OPENAI_MODEL,
            messages: [{ role: "system", content: SYSTEM_PROMPT }, ...messages],
            max_tokens: 300 // Slightly increased for the more capable model
        });
        const response = completion.choices[0].message.content.trim();
        if (!response) throw new Error("Received empty response from OpenAI.");
        return response;
    } catch (error) {
        console.error("Error with OpenAI API call:", error.response ? error.response.data : error.message);
        throw new Error("Failed to get response from OpenAI.");
    }
}

async function summarizeHistory(chatId) {
    const history = conversationHistories[chatId];
    if (!history || history.length === 0) return;

    console.log(`Summarizing ${history.length} messages for chat ${chatId}...`);
    const summarizationMessages = [
        ...history,
        { role: "user", content: SUMMARIZATION_PROMPT }
    ];

    try {
        const summaryResponse = await getOpenAIResponse(summarizationMessages);
        conversationHistories[chatId] = [
            { role: "system", content: `Summary of previous conversation: ${summaryResponse}` }
        ];
        console.log(`Summarization complete for ${chatId}.`);
    } catch (error) {
        console.error(`Failed to summarize history for ${chatId}:`, error);
    }
}

// --- SERVICE REQUEST FUNCTIONS ---

async function isRequestCreationConfirmation(messageContent) {
    try {
        const completion = await openai.chat.completions.create({
            model: OPENAI_MODEL,
            messages: [{
                role: "user",
                content: `${REQUEST_CONFIRMATION_PROMPT}\n\n${messageContent}`
            }],
            max_tokens: 10
        });
        const response = completion.choices[0].message.content.trim().toLowerCase();
        return response.includes('yes');
    } catch (error) {
        console.error("Error identifying request creation confirmation:", error);
        return false;
    }
}

async function handleServiceRequest(chatId, history) {
    if (!WORK_GROUP_ID) {
        console.error("WORK_GROUP_ID is not set in the .env file. Cannot send service request.");
        return;
    }

    try {
        const extractionCompletion = await openai.chat.completions.create({
            model: OPENAI_MODEL,
            messages: [...history, { role: "user", content: REQUEST_EXTRACTION_PROMPT }],
            response_format: { type: "json_object" },
        });
        const extractedData = JSON.parse(extractionCompletion.choices[0].message.content);

        const { address, issue } = extractedData;
        const phone = `+${chatId.split('@')[0]}`;

        if (address && issue) {
            const summaryCompletion = await openai.chat.completions.create({
                model: OPENAI_MODEL,
                messages: [{ role: "user", content: `${ISSUE_SUMMARY_PROMPT}: ${issue}` }],
                max_tokens: 10
            });
            const issueSummary = summaryCompletion.choices[0].message.content.trim();

            const detailedIssueCompletion = await openai.chat.completions.create({
                model: OPENAI_MODEL,
                messages: [...history, { role: "user", content: DETAILED_ISSUE_PROMPT }],
                max_tokens: 150
            });
            const detailedIssue = detailedIssueCompletion.choices[0].message.content.trim();

            const requestMessage = `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –∂–∏–ª—å—Ü–∞\n\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nüìç –ê–¥—Ä–µ—Å: ${address}\n‚ùóÔ∏è –ü—Ä–æ–±–ª–µ–º–∞: ${issueSummary}\n\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n${detailedIssue}`;
            await client.sendMessage(WORK_GROUP_ID, requestMessage);
            console.log(`Service request from ${chatId} sent to work group.`);
        } else {
            console.log(`Incomplete information for service request from ${chatId}. The bot will ask for more details.`);
        }
    } catch (error) {
        console.error(`Error handling service request for ${chatId}:`, error);
    }
}

